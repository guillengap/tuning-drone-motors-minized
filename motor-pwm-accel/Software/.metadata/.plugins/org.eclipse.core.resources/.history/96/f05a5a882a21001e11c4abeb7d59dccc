// AUTHOR: GUILLERMO PEREZ

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpiops.h"
#include "sleep.h"
#include "xil_exception.h"
#include "xttcps.h"
#include "xscugic.h"
#include "lis2ds12.h"
#include <math.h> //added atan

#define ACCEL_SCALE_VAL 100/2000
#define ACCEL_OFF_VAL  200

#define GPIO_DEVICE_ID XPAR_XGPIOPS_0_DEVICE_ID
#define INTC_DEVICE_ID XPAR_SCUGIC_0_DEVICE_ID
#define TICK_TIMER_FREQ_HZ 100
#define TTC_TICK_DEVICE_ID XPAR_XTTCPS_0_DEVICE_ID
#define TTC_TICK_INTR_ID XPAR_XTTCPS_0_INTR
static void TickHandler(void *CallBackRef);

int SetupTicker(XTtcPs *TtcPsInst, u16 DeviceID, u16 TtcTickIntrID, XScuGic *InterruptController);
static int SetupInterruptSystem(u16 IntcDeviceID, XScuGic *IntcInstancePtr);
int SetupTimer(u16 DeviceID, XTtcPs *TtcPsInst);
void set_pwm(u32 cycle);

typedef struct
{
    u32 OutputHz;       /* Output frequency */
    XInterval Interval; /* Interval value */
    u8 Prescaler;       /* Prescaler value */
    u16 Options;        /* Option settings */
} TmrCntrSetup;

XGpioPs Gpio;
XGpioPs_Config *ConfigPtr;
XTtcPs_Config *TtcConfig;
XTtcPs ttcTimer;
TmrCntrSetup *TimerSetup;
XScuGic InterruptController; /* Interrupt controller instance */
XTtcPs TtcPsInst;
u32 MatchValue;
static TmrCntrSetup SettingsTable = {TICK_TIMER_FREQ_HZ, 0, 0, 0};

int main()
{
    u8 DutyCycle;
    u8 DutyCycle2;
    char key_input;
    init_platform();
    sensor_init();

    // pid controller
    float setpoint_angle = 1.0; // reference angle is 0 degrees approx
    float integral = 0.0;
    float dt = 2.05; //0.005 - 2.05  * 0.05
    float Kp = 3.55;  //0.25 - 3.55  * 0.55
    float Ki = 0.011;  //0.25 - 0.005 * 0.55

    TmrCntrSetup SettingsTable = {TICK_TIMER_FREQ_HZ, 0, 0, 0};
    ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
    XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr);
    XGpioPs_SetDirectionPin(&Gpio, 54, 1);
    XGpioPs_SetOutputEnablePin(&Gpio, 54, 1);
    XGpioPs_WritePin(&Gpio, 54, 0x1);

    printf("Tunning drone motor\n\r");
    //printf("DC Motor Control Example\n\r");
    SetupInterruptSystem(INTC_DEVICE_ID, &InterruptController);
    SetupTicker(&ttcTimer, TTC_TICK_DEVICE_ID, TTC_TICK_INTR_ID, &InterruptController);

    int x_axis_current, z_axis_current;

    while (1)
    {
        if ( pollForAccel( &x_axis_current, &z_axis_current))
        {
        	x_axis_current = abs(x_axis_current);
            z_axis_current = abs(z_axis_current); // added
            float x_axis_current_1 = x_axis_current;
            float z_axis_current_1 = z_axis_current;
            float anglexz = (x_axis_current_1 / z_axis_current_1);
            float anglexz2 = atan(anglexz); // added
            float anglexz3 = anglexz2*(57.2958);

            float error_angle = abs (setpoint_angle -anglexz3);

        	if (error_angle < 5)
        	{
        		DutyCycle = 25;
        	}

        	else
        	{
        		//DutyCycle = (u8)((float)ACCEL_SCALE_VAL * (float)diff_x);
                integral =  (integral + (error_angle * dt));
                DutyCycle = ((Kp * error_angle) + (Ki * integral));
        		if (DutyCycle > 80)
        		{
        			DutyCycle = 90;
        		}
        	}
        	set_pwm(DutyCycle);
        	printf("  AccelerationX :  %+5d, AccelerationZ :  %+5d, DutyCycle : %+5d, Angle : %+5f\r",x_axis_current, z_axis_current, DutyCycle, anglexz3);
        	//usleep(10000);
        }
    }
    cleanup_platform();
    return 0;
}

void set_pwm(u32 cycle)
{
    u32 MatchValue;
    MatchValue = (TimerSetup->Interval * cycle) / 100;
    XTtcPs_SetMatchValue(&ttcTimer, 0, MatchValue);
}

int SetupTicker(XTtcPs *TtcPsInst, u16 DeviceID, u16 TtcTickIntrID, XScuGic *InterruptController)
{
    int Status;
    TmrCntrSetup *TimerSetup;
    XTtcPs *TtcPsTick;
    TimerSetup = &SettingsTable;
    TimerSetup->Options |= (XTTCPS_OPTION_INTERVAL_MODE |
                            XTTCPS_OPTION_MATCH_MODE | XTTCPS_OPTION_WAVE_POLARITY);
    Status = SetupTimer(DeviceID, TtcPsInst);
    if (Status != XST_SUCCESS)
    {
        return Status;
    }
    TtcPsTick = TtcPsInst;
    Status = XScuGic_Connect(InterruptController, TtcTickIntrID,
                             (Xil_InterruptHandler)TickHandler, (void *)TtcPsTick);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    XScuGic_Enable(InterruptController, TtcTickIntrID);
    XTtcPs_EnableInterrupts(TtcPsTick, XTTCPS_IXR_INTERVAL_MASK);
    XTtcPs_Start(TtcPsTick);
    return Status;
}

static int SetupInterruptSystem(u16 IntcDeviceID, XScuGic *IntcInstancePtr)
{
    int Status;
    XScuGic_Config *IntcConfig;
    IntcConfig = XScuGic_LookupConfig(IntcDeviceID);
    if (NULL == IntcConfig)
    {
        return XST_FAILURE;
    }
    Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
                                   IntcConfig->CpuBaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
                                 IntcInstancePtr);
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}

int SetupTimer(u16 DeviceID, XTtcPs *TtcPsInst)
{
    int Status;
    XTtcPs_Config *Config;
    XTtcPs *Timer;
    TmrCntrSetup *TimerSetup;
    TimerSetup = &SettingsTable;
    Timer = TtcPsInst;
    Config = XTtcPs_LookupConfig(DeviceID);
    if (NULL == Config)
    {
        return XST_FAILURE;
    }
    Status = XTtcPs_CfgInitialize(Timer, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    XTtcPs_SetOptions(Timer, TimerSetup->Options);
    XTtcPs_CalcIntervalFromFreq(Timer, TimerSetup->OutputHz,
                                &(TimerSetup->Interval), &(TimerSetup->Prescaler));
    XTtcPs_SetInterval(Timer, TimerSetup->Interval);
    XTtcPs_SetPrescaler(Timer, TimerSetup->Prescaler);
    return XST_SUCCESS;
}

void TickHandler(void *CallBackRef)
{
    u32 StatusEvent;
    /*
* Read the interrupt status, then write it back to clear the interrupt.
*/
    StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);
    XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);
    //printf("timer\n\r");
    /*update the flag if interrupt has been occurred*/
    //UpdateFlag = TRUE;
}

